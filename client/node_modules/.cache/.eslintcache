[{"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\index.js":"1","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\App.js":"2","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\store\\index.js":"4","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\index.js":"5","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\common\\jsTPS.js":"6","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\api\\index.js":"7","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\Banner.js":"8","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\Statusbar.js":"9","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\SongCard.js":"10","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\ListCard.js":"11","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\EditToolbar.js":"12","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\ListSelector.js":"13","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\PlaylistCards.js":"14","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\DeleteListModal.js":"15","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\DeleteSongModal.js":"16","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\EditSongModal.js":"17","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\DeleteSong_Transaction.js":"18","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\AddSong_Transaction.js":"19","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\EditSong_Transaction.js":"20","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\MoveSong_Transaction.js":"21"},{"size":879,"mtime":1664908599000,"results":"22","hashOfConfig":"23"},{"size":791,"mtime":1665719109636,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1664908599000,"results":"25","hashOfConfig":"23"},{"size":14600,"mtime":1665721296203,"results":"26","hashOfConfig":"23"},{"size":702,"mtime":1665600573905,"results":"27","hashOfConfig":"23"},{"size":6826,"mtime":1665720553037,"results":"28","hashOfConfig":"23"},{"size":2194,"mtime":1665717623954,"results":"29","hashOfConfig":"23"},{"size":448,"mtime":1664908599000,"results":"30","hashOfConfig":"23"},{"size":468,"mtime":1664908599000,"results":"31","hashOfConfig":"23"},{"size":3053,"mtime":1665713728665,"results":"32","hashOfConfig":"23"},{"size":3256,"mtime":1665629152060,"results":"33","hashOfConfig":"23"},{"size":1702,"mtime":1665714485381,"results":"34","hashOfConfig":"23"},{"size":1771,"mtime":1665719808815,"results":"35","hashOfConfig":"23"},{"size":838,"mtime":1664908599000,"results":"36","hashOfConfig":"23"},{"size":1664,"mtime":1665629143673,"results":"37","hashOfConfig":"23"},{"size":1696,"mtime":1665714814822,"results":"38","hashOfConfig":"23"},{"size":2288,"mtime":1665716191153,"results":"39","hashOfConfig":"23"},{"size":446,"mtime":1665715133642,"results":"40","hashOfConfig":"23"},{"size":400,"mtime":1665714448619,"results":"41","hashOfConfig":"23"},{"size":476,"mtime":1665716287278,"results":"42","hashOfConfig":"23"},{"size":514,"mtime":1665635944830,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"5bn9r0",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\index.js",[],["93","94"],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\App.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\store\\index.js",["95"],"import { createContext, useEffect, useState } from \"react\";\nimport jsTPS from \"../common/jsTPS\";\nimport api from \"../api\";\nimport AddSong_Transaction from \"../transactions/AddSong_Transaction\";\nimport DeleteSong_Transaction from \"../transactions/DeleteSong_Transaction\";\nimport EditSong_Transaction from \"../transactions/EditSong_Transaction\";\nimport MoveSong_Transaction from \"../transactions/MoveSong_Transaction\";\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_LIST: \"DELETE_LIST\",\n  MARK_SONG_FOR_EDIT_OR_DELETE: \"MARK_SONG_FOR_EDIT_OR_DELETE\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markedList: 0, // ! For playlist deletion, song deleting, and song editing | We need to mark a playlist for each of these scenarios\n    song: null,\n    index: 0,\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = (action) => {\n    const { type, payload } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\n        return setStore({\n          idNamePairs: payload.idNamePairs,\n          currentList: payload.playlist,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      // CREATE A NEW LIST\n      // ! PART 1\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter + 1,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n        return setStore({\n          idNamePairs: payload,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      // ! PART 2 - PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: payload,\n          song: null,\n          index: 0,\n        });\n      }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameActive: true,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n      //! PART 2 - DELETE THE LIST AND UPDATE THE STATE\n      case GlobalStoreActionType.DELETE_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload.currentList,\n          newListCounter: payload.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n          song: null,\n          index: 0,\n        });\n      }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT_OR_DELETE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: store.currentList,\n          newListCounter: payload.newListCounter,\n          listNameActive: false,\n          markedList: store.markedList,\n          song: payload.song,\n          index: payload.index,\n        });\n      }\n\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist,\n                  },\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {},\n    });\n\n    tps.clearAllTransactions();\n\n    // ! Disables all buttons but add playlist\n    document.getElementById(\"add-song-button\").disabled = true;\n    document.getElementById(\"undo-button\").disabled = true;\n    document.getElementById(\"redo-button\").disabled = true;\n    document.getElementById(\"close-button\").disabled = true;\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray,\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist,\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n\n    // ! Enables add song button and close button automatically\n    document.getElementById(\"add-song-button\").disabled = false;\n    document.getElementById(\"undo-button\").disabled = true;\n    document.getElementById(\"redo-button\").disabled = true;\n    document.getElementById(\"close-button\").disabled = false;\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null,\n    });\n  };\n\n  // ! Helper function that basically does the same thing as set current list, but without adding to history\n  store.refreshList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist,\n          });\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n\n  // ! PART 1 : NEW LIST CREATION - METHOD THAT CREATES A NEW LIST\n  store.createNewList = function () {\n    async function asyncAddNewPlaylist() {\n      const playlist = { name: \"Untitled\", songs: [] };\n      const newPlaylist = await api.addNewPlaylist(playlist);\n      if (newPlaylist.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist.data.playlist,\n        });\n        store.setCurrentList(newPlaylist.data.playlist._id);\n      }\n    }\n    asyncAddNewPlaylist();\n  };\n\n  // ! PART 2 : DELETING A PLAYLIST\n  store.deleteList = function (id) {\n    console.log(store);\n    async function asyncDeletePlaylist(id) {\n      const playlist = await api.deletePlaylist(id);\n      if (playlist.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: {\n            currentList: null,\n            newListCounter: store.newListCounter - 1, // ! Might have to remove this?\n          },\n        });\n        store.loadIdNamePairs();\n      }\n    }\n    asyncDeletePlaylist(id);\n  };\n\n  store.markPlaylist = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id,\n    });\n  };\n\n  // ! PART 3 : ADD NEW SONG TO CURRENT PLAYLIST\n  store.addNewSongToList = function (id) {\n    async function asyncAddNewSong(id) {\n      const songs = store.currentList.songs;\n      const song = {\n        title: \"Untitled\",\n        artist: \"Untitled\",\n        youTubeId: \"dQw4w9WgXcQ\",\n      };\n      songs.push(song);\n      const newPlaylist = await api.addNewSong(id, store.currentList);\n      if (newPlaylist.data.success) {\n        store.refreshList(newPlaylist.data.playlist._id);\n      }\n    }\n    asyncAddNewSong(id);\n  };\n\n  store.markSongForEditOrDelete = function (song, index) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDIT_OR_DELETE,\n      payload: {\n        song: song,\n        index: index,\n      },\n    });\n  };\n\n  // ! PART 4 : EDITING A SONG IN THE PLAYLIST\n  store.editSong = function (song, index) {\n    async function asyncEditSong(song, index) {\n      let songs = store.currentList.songs;\n      songs[index] = song;\n      let newSongs = {\n        songs: songs,\n      };\n      const playlist = await api.editSong(store.currentList._id, newSongs);\n      if (playlist.data.success) {\n        store.refreshList(playlist.data.playlist._id);\n      }\n    }\n    asyncEditSong(song, index);\n  };\n\n  // ! PART 5 : DELETING A SONG FROM THE PLAYLIST\n  store.deleteSong = function (index) {\n    async function asyncDeleteSong(index) {\n      let songs = store.currentList.songs;\n      songs.splice(index, 1);\n      let newSongs = {\n        songs: songs,\n      };\n      const playlist = await api.deleteSong(store.currentList._id, newSongs);\n      if (playlist.data.success) {\n        store.refreshList(playlist.data.playlist._id);\n      }\n    }\n    asyncDeleteSong(index);\n  };\n\n  // ! PART 6 - HANDLE THE MOVEMENT OF SONG CARDS\n  store.moveSong = function (start, end) {\n    async function asyncMoveSong(start, end) {\n      let songs = store.currentList.songs;\n\n      if (start < end) {\n        let temp = songs[start];\n        for (let i = start; i < end; i++) {\n          songs[i] = songs[i + 1];\n          console.log(i + 1);\n          console.log(songs[i]);\n          console.log(songs[i + 1]);\n        }\n        songs[end] = temp;\n      } else if (start > end) {\n        let temp = songs[start];\n        for (let i = start; i > end; i--) {\n          songs[i] = songs[i - 1];\n        }\n        songs[end] = temp;\n      }\n\n      let newSongs = {\n        songs: songs,\n      };\n      const playlist = await api.moveSong(store.currentList._id, newSongs);\n      if (playlist.data.success) {\n        store.refreshList(playlist.data.playlist._id);\n      }\n    }\n    asyncMoveSong(start, end);\n  };\n\n  // ! AUXILARY FUNCTION USED BY THE DELETE SONG TRANSACTION\n  store.addOldSong = function (id, index, song) {\n    async function asyncAddOldSong(id, index, song) {\n      let songs = store.currentList.songs;\n      songs.splice(index, 0, song);\n      const playlist = await api.addNewSong(id, store.currentList);\n      if (playlist.data.success) {\n        store.refreshList(playlist.data.playlist._id);\n      }\n    }\n    asyncAddOldSong(id, index, song);\n  };\n\n  // ! TRANSACTIONS\n  store.addSongTransaction = function (id) {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.deleteSongTransaction = function (song, index) {\n    let transaction = new DeleteSong_Transaction(store, song, index);\n    tps.addTransaction(transaction);\n  };\n\n  store.editSongTransaction = function (index, oldSong, newSong) {\n    let transaction = new EditSong_Transaction(store, index, oldSong, newSong);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return { store, storeReducer };\n};\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\index.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\common\\jsTPS.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\api\\index.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\Banner.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\Statusbar.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\SongCard.js",["96"],"import React, { useContext, useState } from \"react\";\nimport { GlobalStoreContext } from \"../store\";\n\nfunction SongCard(props) {\n  const { store } = useContext(GlobalStoreContext);\n\n  const { song, index } = props;\n  let cardClass = \"list-card unselected-list-card\";\n\n  // ! Move Song Start\n  function handleDragStart(event) {\n    event.dataTransfer.setData(\"song\", event.target.id);\n  }\n  function handleDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n  function handleDragEnter(event) {\n    event.preventDefault();\n  }\n  function handleDragLeave(event) {\n    event.preventDefault();\n  }\n  function handleDrop(event) {\n    event.preventDefault();\n    let target = event.target;\n    let targetId = target.id;\n    targetId = targetId.substring(\n      target.id.indexOf(\"-\") + 1,\n      target.id.indexOf(\"-\") + 2\n    );\n    let sourceId = event.dataTransfer.getData(\"song\");\n    sourceId = sourceId.substring(\n      sourceId.indexOf(\"-\") + 1,\n      sourceId.indexOf(\"-\") + 2 // ! This is wrong?\n    );\n\n    // ASK THE MODEL TO MOVE THE DATA\n    store.moveSongTransaction(parseInt(sourceId), parseInt(targetId));\n  }\n  // ! Move Song End\n\n  function handleDeleteSong(event) {\n    event.stopPropagation();\n    store.markPlaylist(store.currentList._id); // ! We now know which playlist to delete from store, use this in the modal\n    store.markSongForEditOrDelete(song, index); // ! We know which song to delete from the playlist\n\n    let span = document.getElementById(\"delete-song-span\");\n    span.innerText = song.title;\n\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  }\n\n  function handleEditSong(event) {\n    event.stopPropagation();\n    store.markPlaylist(store.currentList._id); // ! We now know which playlist to delete from store, use this in the modal\n    store.markSongForEditOrDelete(song, index); // ! We know which song to delete from the playlist\n\n    document.getElementById(\"edit-modal-title-input\").value = song.title;\n    document.getElementById(\"edit-modal-artist-input\").value = song.artist;\n    document.getElementById(\"edit-modal-id-input\").value = song.youTubeId;\n\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  }\n\n  return (\n    <div\n      key={index}\n      id={\"song-\" + index + \"-card\"}\n      className={cardClass}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n      draggable=\"true\"\n      onDoubleClick={handleEditSong}\n    >\n      {index + 1}.\n      <a\n        id={\"song-\" + index + \"-link\"}\n        className=\"song-link\"\n        href={\"https://www.youtube.com/watch?v=\" + song.youTubeId}\n      >\n        {song.title} by {song.artist}\n      </a>\n      <input\n        type=\"button\"\n        id={\"remove-song-\" + index}\n        className=\"list-card-button\"\n        value={\"\\u2715\"}\n        onClick={handleDeleteSong}\n      />\n    </div>\n  );\n}\n\nexport default SongCard;\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\ListCard.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\EditToolbar.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\ListSelector.js",["97"],"import React, { useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ListCard from \"./ListCard.js\";\nimport { GlobalStoreContext } from \"../store\";\n/*\n    This React component lists all the playlists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst ListSelector = () => {\n  const { store } = useContext(GlobalStoreContext);\n  store.history = useHistory();\n\n  useEffect(() => {\n    store.loadIdNamePairs();\n\n    // ! Disables all the buttons upon first loading (except add playlist)\n    document.getElementById(\"add-song-button\").disabled = true;\n    document.getElementById(\"undo-button\").disabled = true;\n    document.getElementById(\"redo-button\").disabled = true;\n    document.getElementById(\"close-button\").disabled = true;\n\n    document.addEventListener(\"keydown\", (event) => {\n      if (!this.state.modalIsOpen) {\n        if (event.ctrlKey && (event.key === \"z\" || event.key === \"Z\")) {\n          this.undo();\n        } else if (event.ctrlKey && (event.key === \"y\" || event.key === \"Y\")) {\n          this.redo();\n        }\n      }\n    });\n  }, []);\n\n  function handleCreateNewList() {\n    store.createNewList();\n  }\n  let listCard = \"\";\n  if (store) {\n    listCard = store.idNamePairs.map((pair) => (\n      <ListCard key={pair._id} idNamePair={pair} selected={false} />\n    ));\n  }\n  return (\n    <div id=\"playlist-selector\">\n      <div id=\"list-selector-list\">\n        <div id=\"playlist-selector-heading\">\n          <input\n            type=\"button\"\n            id=\"add-list-button\"\n            onClick={handleCreateNewList}\n            className=\"playlister-button\"\n            value=\"+\"\n          />\n          Your Lists\n        </div>{\" \"}\n        {listCard}\n      </div>\n    </div>\n  );\n};\n\nexport default ListSelector;\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\PlaylistCards.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\DeleteListModal.js",["98"],"import { useContext } from \"react\";\r\nimport { GlobalStoreContext } from \"../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction DeleteListModal() {\r\n  const { store } = useContext(GlobalStoreContext);\r\n  const history = useHistory();\r\n\r\n  function handleDeleteList() {\r\n    let modal = document.getElementById(\"delete-list-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n    store.deleteList(store.markedList);\r\n  }\r\n\r\n  function handleCloseModal() {\r\n    let modal = document.getElementById(\"delete-list-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"delete-list-modal\" data-animation=\"slideInOutLeft\" class=\"modal\">\r\n      <div className=\"modal-root\" id=\"verify-delete-list-root\">\r\n        <div className=\"modal-north\">\r\n          Delete the <span id=\"delete-list-span-1\"></span> playlist?\r\n        </div>\r\n        <div className=\"modal-center\">\r\n          <div className=\"modal-center-content\">\r\n            Are you sure you wish to permanently delete the{\" \"}\r\n            <span id=\"delete-list-span-2\"></span> playlist?\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-south\">\r\n          <input\r\n            type=\"button\"\r\n            id=\"remove-song-confirm-button\"\r\n            className=\"modal-button\"\r\n            value=\"Confirm\"\r\n            onClick={handleDeleteList}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            id=\"remove-song-cancel-button\"\r\n            className=\"modal-button\"\r\n            value=\"Cancel\"\r\n            onClick={handleCloseModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteListModal;\r\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\DeleteSongModal.js",["99","100"],"import { useContext } from \"react\";\r\nimport { GlobalStoreContext } from \"../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction DeleteSongModal() {\r\n  const { store } = useContext(GlobalStoreContext);\r\n  const history = useHistory();\r\n\r\n  const name = \"\";\r\n  // if (store.song) {\r\n  //   name = store.song.title;\r\n  // }\r\n\r\n  function handleDeleteSong() {\r\n    store.deleteSongTransaction(store.song, store.index);\r\n    let modal = document.getElementById(\"delete-song-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  }\r\n\r\n  function handleCloseDeleteSongModal() {\r\n    let modal = document.getElementById(\"delete-song-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  }\r\n\r\n  return (\r\n    <div class=\"modal\" id=\"delete-song-modal\" data-animation=\"slideInOutLeft\">\r\n      <div class=\"modal-root\" id=\"verify-delete-song-root\">\r\n        <div class=\"modal-north\">Remove song?</div>\r\n        <div class=\"modal-center\">\r\n          <div class=\"modal-center-content\">\r\n            Are you sure you wish to permanently remove{\" \"}\r\n            <span id=\"delete-song-span\"></span> from the playlist?\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-south\">\r\n          <input\r\n            type=\"button\"\r\n            id=\"delete-song-confirm-button\"\r\n            class=\"modal-button\"\r\n            value=\"Confirm\"\r\n            onClick={handleDeleteSong}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            id=\"delete-song-cancel-button\"\r\n            class=\"modal-button\"\r\n            value=\"Cancel\"\r\n            onClick={handleCloseDeleteSongModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteSongModal;\r\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\components\\EditSongModal.js",["101"],"import { useContext } from \"react\";\r\nimport { GlobalStoreContext } from \"../store\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction EditSongModal() {\r\n  const { store } = useContext(GlobalStoreContext);\r\n  const history = useHistory();\r\n\r\n  function handleEditSong() {\r\n    const oldSong = {\r\n      title: store.song.title,\r\n      artist: store.song.artist,\r\n      youTubeId: store.song.youTubeId,\r\n    };\r\n    const song = {\r\n      title: document.getElementById(\"edit-modal-title-input\").value,\r\n      artist: document.getElementById(\"edit-modal-artist-input\").value,\r\n      youTubeId: document.getElementById(\"edit-modal-id-input\").value,\r\n    };\r\n    store.editSongTransaction(store.index, oldSong, song);\r\n    let modal = document.getElementById(\"edit-song-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  }\r\n\r\n  function handleCloseEditModal() {\r\n    let modal = document.getElementById(\"edit-song-modal\");\r\n    modal.classList.remove(\"is-visible\");\r\n  }\r\n\r\n  return (\r\n    <div class=\"modal\" id=\"edit-song-modal\" data-animation=\"slideInOutLeft\">\r\n      <div class=\"modal-root\" id=\"verify-delete-list-root\">\r\n        <div class=\"modal-north\">Edit Song</div>\r\n        <div class=\"modal-center\">\r\n          <div class=\"modal-center-content\">\r\n            <div id=\"edit-song-inputs\">\r\n              <label for=\"edit-modal-title-input\">Title:</label>\r\n              <input type=\"text\" id=\"edit-modal-title-input\" />\r\n\r\n              <label for=\"edit-modal-artist-input\">Artist:</label>\r\n              <input type=\"text\" id=\"edit-modal-artist-input\" />\r\n\r\n              <label for=\"edit-modal-id-input\">YouTube ID:</label>\r\n              <input type=\"text\" id=\"edit-modal-id-input\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-south\">\r\n          <input\r\n            type=\"button\"\r\n            id=\"edit-song-confirm-button\"\r\n            class=\"modal-button\"\r\n            value=\"Confirm\"\r\n            onClick={handleEditSong}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            id=\"edit-song-cancel-button\"\r\n            class=\"modal-button\"\r\n            value=\"Cancel\"\r\n            onClick={handleCloseEditModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditSongModal;\r\n","C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\DeleteSong_Transaction.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\AddSong_Transaction.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\EditSong_Transaction.js",[],"C:\\Users\\Sebastian Valdez\\Documents\\CSE 316 Homeworks\\Homework 3\\Playlister_HW3-main\\client\\src\\transactions\\MoveSong_Transaction.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":25,"nodeType":"108","messageId":"109","endLine":1,"endColumn":34},{"ruleId":"106","severity":1,"message":"110","line":1,"column":29,"nodeType":"108","messageId":"109","endLine":1,"endColumn":37},{"ruleId":"111","severity":1,"message":"112","line":32,"column":6,"nodeType":"113","endLine":32,"endColumn":8,"suggestions":"114"},{"ruleId":"106","severity":1,"message":"115","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":16},{"ruleId":"106","severity":1,"message":"115","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":16},{"ruleId":"106","severity":1,"message":"116","line":9,"column":9,"nodeType":"108","messageId":"109","endLine":9,"endColumn":13},{"ruleId":"106","severity":1,"message":"115","line":7,"column":9,"nodeType":"108","messageId":"109","endLine":7,"endColumn":16},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["119"],"'history' is assigned a value but never used.","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [store]",{"range":"122","text":"123"},[1091,1093],"[store]"]