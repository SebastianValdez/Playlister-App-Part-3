{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport jsTPS from \"../common/jsTPS\";\nimport api from \"../api\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markedList: 0 // ! For playlist deletion, song deleting, and song editing | We need to mark a playlist for each of these scenarios\n\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: 0\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: 0\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          // ! PART 1\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markedList: 0\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: 0\n          });\n        }\n      // ! PART 2 - PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: 0\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markedList: 0\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // ! PART 1 : NEW LIST CREATION - METHOD THAT CREATES A NEW LIST\n\n\n  store.createNewList = function () {\n    async function asyncAddNewPlaylist() {\n      const playlist = {\n        name: \"Untitled\",\n        songs: []\n      };\n      const newPlaylist = await api.addNewPlaylist(playlist);\n\n      if (newPlaylist.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist.data.playlist\n        });\n        store.setCurrentList(newPlaylist.data.playlist._id);\n      }\n    }\n\n    asyncAddNewPlaylist();\n  }; // ! PART 2 : DELETING A PLAYLIST\n\n\n  store.deleteList = function (id) {\n    async function asyncDeletePlaylist(id) {\n      const playlist = await api.deletePlaylist(id);\n\n      if (playlist.data.success) {\n        storeReducer({});\n      }\n    }\n\n    asyncDeletePlaylist(id);\n  }; // ! PART 3 : ADD NEW SONG TO CURRENT PLAYLIST\n\n\n  store.addNewSongToList = function (id) {\n    async function asyncAddNewSong(id) {\n      const songs = store.currentList.songs;\n      const song = {\n        title: \"Untitled\",\n        artist: \"Untitled\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      songs.push(song);\n      const newPlaylist = await api.addNewSong(id, store.currentList);\n\n      if (newPlaylist.data.success) {\n        store.setCurrentList(newPlaylist.data.playlist._id);\n      }\n    }\n\n    asyncAddNewSong(id);\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"BwomXq08NSVQlX/tLITa6j3Jjaw=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markedList","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","createNewList","asyncAddNewPlaylist","newPlaylist","addNewPlaylist","deleteList","asyncDeletePlaylist","deletePlaylist","addNewSongToList","asyncAddNewSong","song","title","artist","youTubeId","addNewSong"],"sources":["C:/Users/Sebastian Valdez/Documents/CSE 316 Homeworks/Homework 3/Playlister_HW3-main/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport jsTPS from \"../common/jsTPS\";\nimport api from \"../api\";\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markedList: 0, // ! For playlist deletion, song deleting, and song editing | We need to mark a playlist for each of these scenarios\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = (action) => {\n    const { type, payload } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\n        return setStore({\n          idNamePairs: payload.idNamePairs,\n          currentList: payload.playlist,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n        });\n      }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n        });\n      }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\n        // ! PART 1\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter + 1,\n          listNameActive: false,\n          markedList: 0,\n        });\n      }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n        return setStore({\n          idNamePairs: payload,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n        });\n      }\n      // ! PART 2 - PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: null,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: payload,\n        });\n      }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameActive: false,\n          markedList: 0,\n        });\n      }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n        return setStore({\n          idNamePairs: store.idNamePairs,\n          currentList: payload,\n          newListCounter: store.newListCounter,\n          listNameActive: true,\n          markedList: 0,\n        });\n      }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist,\n                  },\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {},\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray,\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist,\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null,\n    });\n  };\n\n  // ! PART 1 : NEW LIST CREATION - METHOD THAT CREATES A NEW LIST\n  store.createNewList = function () {\n    async function asyncAddNewPlaylist() {\n      const playlist = { name: \"Untitled\", songs: [] };\n      const newPlaylist = await api.addNewPlaylist(playlist);\n      if (newPlaylist.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist.data.playlist,\n        });\n        store.setCurrentList(newPlaylist.data.playlist._id);\n      }\n    }\n    asyncAddNewPlaylist();\n  };\n\n  // ! PART 2 : DELETING A PLAYLIST\n  store.deleteList = function (id) {\n    async function asyncDeletePlaylist(id) {\n      const playlist = await api.deletePlaylist(id);\n      if (playlist.data.success) {\n        storeReducer({});\n      }\n    }\n    asyncDeletePlaylist(id);\n  };\n\n  // ! PART 3 : ADD NEW SONG TO CURRENT PLAYLIST\n  store.addNewSongToList = function (id) {\n    async function asyncAddNewSong(id) {\n      const songs = store.currentList.songs;\n      const song = {\n        title: \"Untitled\",\n        artist: \"Untitled\",\n        youTubeId: \"dQw4w9WgXcQ\",\n      };\n      songs.push(song);\n      const newPlaylist = await api.addNewSong(id, store.currentList);\n      if (newPlaylist.data.success) {\n        store.setCurrentList(newPlaylist.data.playlist._id);\n      }\n    }\n    asyncAddNewSong(id);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return { store, storeReducer };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}