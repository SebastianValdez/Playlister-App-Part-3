{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:4000/api\"\n}); // THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get(\"playlistpairs\");\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const updatePlaylistById = (id, payload) => api.put(`/playlist/${id}`, payload); // ! Updates the name of the playlist\n\nexport const addNewPlaylist = payload => api.post(`/playlist`, payload); // ! PART 1 - Adding a new playlist\n\nexport const deletePlaylist = id => api.delete(`/playlist/${id}`); // ! PART 2 - Deleting a playlist\n\nexport const addNewSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 3 - Adding a new song to a list (uses te same route)\n\nexport const editSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 4 - Editing a song (uses the same route)\n\nexport const deleteSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 5 - Deleting a song (uses the same route)\n\nexport const moveSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 6 - Moving a song (uses the same route)\n\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  updatePlaylistById,\n  addNewPlaylist,\n  deletePlaylist,\n  addNewSong,\n  editSong,\n  deleteSong,\n  moveSong\n};\nexport default apis;","map":{"version":3,"names":["axios","api","create","baseURL","getAllPlaylists","get","getPlaylistPairs","getPlaylistById","id","updatePlaylistById","payload","put","addNewPlaylist","post","deletePlaylist","delete","addNewSong","editSong","deleteSong","moveSong","apis"],"sources":["C:/Users/Sebastian Valdez/Documents/CSE 316 Homeworks/Homework 3/Playlister_HW3-main/client/src/api/index.js"],"sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:4000/api\",\n});\n\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get(\"playlistpairs\");\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`);\nexport const updatePlaylistById = (id, payload) =>\n  api.put(`/playlist/${id}`, payload); // ! Updates the name of the playlist\nexport const addNewPlaylist = (payload) => api.post(`/playlist`, payload); // ! PART 1 - Adding a new playlist\nexport const deletePlaylist = (id) => api.delete(`/playlist/${id}`); // ! PART 2 - Deleting a playlist\nexport const addNewSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 3 - Adding a new song to a list (uses te same route)\nexport const editSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 4 - Editing a song (uses the same route)\nexport const deleteSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 5 - Deleting a song (uses the same route)\nexport const moveSong = (id, payload) => api.post(`/playlist/${id}`, payload); // ! PART 6 - Moving a song (uses the same route)\n\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  updatePlaylistById,\n  addNewPlaylist,\n  deletePlaylist,\n  addNewSong,\n  editSong,\n  deleteSong,\n  moveSong,\n};\n\nexport default apis;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;EACvBC,OAAO,EAAE;AADc,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAMH,GAAG,CAACI,GAAJ,CAAS,YAAT,CAA9B;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAML,GAAG,CAACI,GAAJ,CAAQ,eAAR,CAA/B;AACP,OAAO,MAAME,eAAe,GAAIC,EAAD,IAAQP,GAAG,CAACI,GAAJ,CAAS,aAAYG,EAAG,EAAxB,CAAhC;AACP,OAAO,MAAMC,kBAAkB,GAAG,CAACD,EAAD,EAAKE,OAAL,KAChCT,GAAG,CAACU,GAAJ,CAAS,aAAYH,EAAG,EAAxB,EAA2BE,OAA3B,CADK,C,CACgC;;AACvC,OAAO,MAAME,cAAc,GAAIF,OAAD,IAAaT,GAAG,CAACY,IAAJ,CAAU,WAAV,EAAsBH,OAAtB,CAApC,C,CAAoE;;AAC3E,OAAO,MAAMI,cAAc,GAAIN,EAAD,IAAQP,GAAG,CAACc,MAAJ,CAAY,aAAYP,EAAG,EAA3B,CAA/B,C,CAA8D;;AACrE,OAAO,MAAMQ,UAAU,GAAG,CAACR,EAAD,EAAKE,OAAL,KAAiBT,GAAG,CAACY,IAAJ,CAAU,aAAYL,EAAG,EAAzB,EAA4BE,OAA5B,CAApC,C,CAA0E;;AACjF,OAAO,MAAMO,QAAQ,GAAG,CAACT,EAAD,EAAKE,OAAL,KAAiBT,GAAG,CAACY,IAAJ,CAAU,aAAYL,EAAG,EAAzB,EAA4BE,OAA5B,CAAlC,C,CAAwE;;AAC/E,OAAO,MAAMQ,UAAU,GAAG,CAACV,EAAD,EAAKE,OAAL,KAAiBT,GAAG,CAACY,IAAJ,CAAU,aAAYL,EAAG,EAAzB,EAA4BE,OAA5B,CAApC,C,CAA0E;;AACjF,OAAO,MAAMS,QAAQ,GAAG,CAACX,EAAD,EAAKE,OAAL,KAAiBT,GAAG,CAACY,IAAJ,CAAU,aAAYL,EAAG,EAAzB,EAA4BE,OAA5B,CAAlC,C,CAAwE;;AAE/E,MAAMU,IAAI,GAAG;EACXhB,eADW;EAEXE,gBAFW;EAGXC,eAHW;EAIXE,kBAJW;EAKXG,cALW;EAMXE,cANW;EAOXE,UAPW;EAQXC,QARW;EASXC,UATW;EAUXC;AAVW,CAAb;AAaA,eAAeC,IAAf"},"metadata":{},"sourceType":"module"}